{"version":3,"sources":["../../../../src/server/trees/utils/otherplayerprice.js"],"names":["db","require","otherPlayerPrice","getTree","allTrees","playerId","otherTreesInCercle","NotFreeTreesInCercle","playerIdTreesInCercle","NotFreeTreesInCercleTotalLeave","playerIdTreeInCercleTotalLeave","center","lat","geoloc","lon","radius","forEach","element","inCercleRadius","player_id","push","treePrice","leave","length","console","log","module","exports"],"mappings":";;AAKA;;AAHA,MAAMA,EAAE,GAAGC,OAAO,CAAC,mBAAD,CAAlB;;AAKA,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUC,QAAV,EAAoBC,QAApB,KAAiC;AACtD,QAAMC,kBAAkB,GAAG,EAA3B;AACA,QAAMC,oBAAoB,GAAG,EAA7B;AACA,QAAMC,qBAAqB,GAAG,EAA9B;AACA,MAAIC,8BAA8B,GAAG,CAArC;AACA,MAAIC,8BAA8B,GAAG,CAArC;AAGA,QAAMC,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAET,OAAO,CAACU,MAAR,CAAeD,GAArB;AAA0BE,IAAAA,GAAG,EAAEX,OAAO,CAACU,MAAR,CAAeC;AAA9C,GAAf;AACA,QAAMC,MAAM,GAAG,GAAf;AAEAX,EAAAA,QAAQ,CAACY,OAAT,CAAiBC,OAAO,IAAI;AACxB,UAAMC,cAAc,GAAG,oCACnB;AAACN,MAAAA,GAAG,EAAEK,OAAO,CAACJ,MAAR,CAAeD,GAArB;AAA0BE,MAAAA,GAAG,EAAEG,OAAO,CAACJ,MAAR,CAAeC;AAA9C,KADmB,EAEnBH,MAFmB,EAGnBI,MAHmB,CAAvB;;AAMA,QAAIG,cAAc,KAAK,IAAvB,EAA6B;AACzB,UACID,OAAO,CAACE,SAAR,KAAsBhB,OAAO,CAACgB,SAA9B,IACAF,OAAO,CAACE,SAAR,KAAsB,IAF1B,EAGE;AACEZ,QAAAA,oBAAoB,CAACa,IAArB,CAA0BH,OAA1B;AACH,OALD,MAKO,IACHA,OAAO,CAACE,SAAR,KAAsBd,QAAtB,IACAY,OAAO,CAACE,SAAR,KAAsB,IAFnB,EAGL;AACEX,QAAAA,qBAAqB,CAACY,IAAtB,CAA2BH,OAA3B;AACH,OALM,MAKA;AACHX,QAAAA,kBAAkB,CAACc,IAAnB,CAAwBH,OAAxB;AACH;AACJ;AACJ,GAtBD;AAwBAV,EAAAA,oBAAoB,CAACS,OAArB,CAA6BC,OAAO,IAAI;AACpCR,IAAAA,8BAA8B,IAAIQ,OAAlC;AACH,GAFD;AAGAT,EAAAA,qBAAqB,CAACQ,OAAtB,CAA8BC,OAAO,IAAI;AACrCP,IAAAA,8BAA8B,IAAIO,OAAlC;AACH,GAFD;AAIA,QAAMI,SAAS,GACXlB,OAAO,CAACmB,KAAR,GACCb,8BAA8B,IAC1BH,kBAAkB,CAACiB,MAAnB,GAA4BhB,oBAAoB,CAACgB,MADvB,CAA/B,GAEIhB,oBAAoB,CAACgB,MAHzB,GAIAf,qBAAqB,CAACe,MAJtB,GAKAb,8BANJ;AAQAc,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACH,CAnDD;;AAqDAK,MAAM,CAACC,OAAP,GAAiBzB,gBAAjB","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nconst db = require(\"../../_helpers/db\");\n//const {doc} = require(\"prettier\");\n//const Trees = db.Trees;\nimport {insideCircle} from \"geolocation-utils\";\n\nconst otherPlayerPrice = (getTree, allTrees, playerId) => {\n    const otherTreesInCercle = [];\n    const NotFreeTreesInCercle = [];\n    const playerIdTreesInCercle = [];\n    let NotFreeTreesInCercleTotalLeave = 0;\n    let playerIdTreeInCercleTotalLeave = 0;\n    //console.log(getTree);\n\n    const center = {lat: getTree.geoloc.lat, lon: getTree.geoloc.lon};\n    const radius = 100; // meters\n\n    allTrees.forEach(element => {\n        const inCercleRadius = insideCircle(\n            {lat: element.geoloc.lat, lon: element.geoloc.lon},\n            center,\n            radius,\n        );\n\n        if (inCercleRadius === true) {\n            if (\n                element.player_id === getTree.player_id &&\n                element.player_id !== null\n            ) {\n                NotFreeTreesInCercle.push(element);\n            } else if (\n                element.player_id === playerId &&\n                element.player_id !== null\n            ) {\n                playerIdTreesInCercle.push(element);\n            } else {\n                otherTreesInCercle.push(element);\n            }\n        }\n    });\n\n    NotFreeTreesInCercle.forEach(element => {\n        NotFreeTreesInCercleTotalLeave += element;\n    });\n    playerIdTreesInCercle.forEach(element => {\n        playerIdTreeInCercleTotalLeave += element;\n    });\n\n    const treePrice =\n        getTree.leave +\n        (NotFreeTreesInCercleTotalLeave *\n            (otherTreesInCercle.length + NotFreeTreesInCercle.length)) /\n            NotFreeTreesInCercle.length +\n        playerIdTreesInCercle.length -\n        playerIdTreeInCercleTotalLeave;\n\n    console.log(treePrice);\n};\n\nmodule.exports = otherPlayerPrice;\n\n// http://localhost/trees/buyotherplayertree/5ece7015b467be4c63b04e4a/99\n\n// Si l'arbre appartient à un autre joueur, le prix est calculé avec la formule suivante: [valeur de l'arbre ciblé] + ([valeur de tous les arbres du joueur ciblé dans un rayon de 100 m] × ([nombre d'arbres dans un rayon de 100 m] / [ quantité d'arbre du joueur ciblé dans un rayon de 100m])) + [valeur de tous les autres arbres du joueur dans un rayon de 100m] - [valeur de tout votre arbre dans un rayon de 100m].\n\n// If the tree belongs to another player, the price is computed with the following formula: [value of the targetted tree] + ([value of all the targetted player's trees in 100m radius] × ([amount of trees in 100m radius] / [amount of tree of targetted player in 100m radius])) + [value of all the other players trees in 100m radius] - [value of all your tree in 100m radius].\n"],"file":"otherplayerprice.js"}