{"version":3,"sources":["../../../../src/server/trees/utils/getfreetrees.js"],"names":["db","require","doc","Trees","newUserFunction","getPlayerId","getFreeTrees","pseudoPlayer","colorPlayer","playerId","freeTrees","freeTreesNumber","length","randomTrees","getRandomTrees","i","getRandomTreeNumber","console","log","getRandomInt","max","Math","floor","random","push","index","addFreeTreesToNewPlayers","treeArray","findById","_id","err","player_id","free","player_color","save","error","forEach","element","module","exports"],"mappings":";;AAKA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAQD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,KAAK,GAAGH,EAAE,CAACG,KAAjB;;AAEA,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,YAAtC,EAAoDC,YAApD,EAAkEC,WAAlE,EAA+E;AAC3E,QAAMC,QAAQ,GAAGJ,WAAjB;AACA,QAAMK,SAAS,GAAGJ,YAAlB;AACA,QAAMK,eAAe,GAAGD,SAAS,CAACE,MAAlC;AACA,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,CAAJ;AACA,MAAIC,mBAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,MAAIP,eAAe,GAAG,EAAtB,EAA0B;AACtB,UAAMQ,YAAY,GAAGC,GAAG,IAAI;AACxBJ,MAAAA,mBAAmB,GAAGK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAAtB;;AAIA,UAAIL,CAAC,KAAK,CAAV,EAAa;AACTF,QAAAA,WAAW,CAACW,IAAZ,CAAiBR,mBAAjB;AACH,OAFD,MAEO;AACH,YACIA,mBAAmB,KAAKA,mBAAmB,CAAC,CAAD,CAA3C,IACAA,mBAAmB,KAAKA,mBAAmB,CAAC,CAAD,CAD3C,IAEAA,mBAAmB,KAAKA,mBAAmB,CAAC,CAAD,CAH/C,EAIE;AACEH,UAAAA,WAAW,CAACW,IAAZ,CAAiBR,mBAAjB;AACH;AACJ;AACJ,KAhBD;;AAiBA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpBI,MAAAA,YAAY,CAACR,eAAD,CAAZ;AACH;;AAID,QAAII,CAAC,KAAK,CAAV,EAAa;AACT,WAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,CAA5B,EAA+BA,KAAK,EAApC,EAAwC;AACpCX,QAAAA,cAAc,CAACU,IAAf,CAAoBd,SAAS,CAACG,WAAW,CAACY,KAAD,CAAZ,CAA7B;AACH;;AAED,qBAAeC,wBAAf,CAAwCC,SAAxC,EAAmD;AAC/C,YAAI;AACA,gBAAMjB,SAAS,GAAG,MAAMP,KAAK,CAACyB,QAAN,CACpBD,SAAS,CAACE,GADU,EAEpB,UAAUC,GAAV,EAAe5B,GAAf,EAAoB;AAChBA,YAAAA,GAAG,CAAC6B,SAAJ,GAAgBtB,QAAhB;AACAP,YAAAA,GAAG,CAAC8B,IAAJ,GAAW,KAAX;AACA9B,YAAAA,GAAG,CAAC+B,YAAJ,GAAmBzB,WAAnB;AACAN,YAAAA,GAAG,CAACgC,IAAJ;AACAjB,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,WARmB,CAAxB;AAUH,SAXD,CAWE,OAAOiB,KAAP,EAAc;AACZlB,UAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACH;AACJ;;AACDrB,MAAAA,cAAc,CAACsB,OAAf,CAAuBC,OAAO,IAAI;AAC9BX,QAAAA,wBAAwB,CAACW,OAAD,CAAxB;AACH,OAFD;AAGH;AACJ,GAjDD,MAiDO;AACHpB,IAAAA,OAAO,CAACC,GAAR,CACI,0EADJ;AAGH;AAGJ;;AAEDoB,MAAM,CAACC,OAAP,GAAiBnC,eAAjB","sourcesContent":["/* eslint-disable prefer-arrow-callback */\n/* eslint-disable no-shadow */\n/* eslint-disable no-inner-declarations */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nconst db = require(\"../_helpers/db\");\nconst {doc} = require(\"prettier\");\nconst Trees = db.Trees;\n\nfunction newUserFunction(getPlayerId, getFreeTrees, pseudoPlayer, colorPlayer) {\n    const playerId = getPlayerId;\n    const freeTrees = getFreeTrees;\n    const freeTreesNumber = freeTrees.length;\n    const randomTrees = [];\n    const getRandomTrees = [];\n    let i;\n    let getRandomTreeNumber;\n    console.log(\"==> GETFREETREES <==\");\n    if (freeTreesNumber > 10) {\n        const getRandomInt = max => {\n            getRandomTreeNumber = Math.floor(Math.random() * Math.floor(max));\n\n            //console.log(getRandomTreeNumber);\n\n            if (i === 0) {\n                randomTrees.push(getRandomTreeNumber);\n            } else {\n                if (\n                    getRandomTreeNumber !== getRandomTreeNumber[0] ||\n                    getRandomTreeNumber !== getRandomTreeNumber[1] ||\n                    getRandomTreeNumber !== getRandomTreeNumber[2]\n                ) {\n                    randomTrees.push(getRandomTreeNumber);\n                }\n            }\n        };\n        for (i = 0; i < 3; i++) {\n            getRandomInt(freeTreesNumber);\n        }\n\n        //console.log(randomTrees);\n\n        if (i === 3) {\n            for (let index = 0; index < 3; index++) {\n                getRandomTrees.push(freeTrees[randomTrees[index]]);\n            }\n            //console.log(getRandomTrees);\n            async function addFreeTreesToNewPlayers(treeArray) {\n                try {\n                    const freeTrees = await Trees.findById(\n                        treeArray._id,\n                        function (err, doc) {\n                            doc.player_id = playerId;\n                            doc.free = false;\n                            doc.player_color = colorPlayer;\n                            doc.save();\n                            console.log(\"modification de l'abre\");\n                        },\n                    );\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n            getRandomTrees.forEach(element => {\n                addFreeTreesToNewPlayers(element);\n            });\n        }\n    } else {\n        console.log(\n            \"Il n'y a plus assez d'abres disponnible pour un nouveau joueur désolé...\",\n        );\n    }\n    //console.log(getRandomTrees);\n    //module.exports = getRandomTrees;\n}\n\nmodule.exports = newUserFunction;\n"],"file":"getfreetrees.js"}