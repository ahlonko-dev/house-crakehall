{"version":3,"sources":["../../src/server/getfreetrees.js"],"names":["db","require","Trees","newUserFunction","getPlayerId","getFreeTrees","playerId","freeTrees","freeTreesNumber","length","randomTrees","getRandomTrees","i","getRandomTreeNumber","getRandomInt","max","Math","floor","random","push","index","addFreeTreesToNewPlayers","treeArray","findById","_id","err","doc","player_id","save","console","log","error","forEach","element","module","exports"],"mappings":";;AAIA,MAAMA,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AAEA,MAAMC,KAAK,GAAGF,EAAE,CAACE,KAAjB;;AAEA,MAAMC,eAAe,GAAG,CAACC,WAAD,EAAcC,YAAd,KAA+B;AACnD,QAAMC,QAAQ,GAAGF,WAAjB;AACA,QAAMG,SAAS,GAAGF,YAAlB;AACA,QAAMG,eAAe,GAAGD,SAAS,CAACE,MAAlC;AACA,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,CAAJ;AACA,MAAIC,mBAAJ;;AAEA,MAAIL,eAAe,GAAG,EAAtB,EAA0B;AACtB,UAAMM,YAAY,GAAGC,GAAG,IAAI;AACxBF,MAAAA,mBAAmB,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAAtB;;AAIA,UAAIH,CAAC,KAAK,CAAV,EAAa;AACTF,QAAAA,WAAW,CAACS,IAAZ,CAAiBN,mBAAjB;AACH,OAFD,MAEO;AACH,YACIA,mBAAmB,KAAKA,mBAAmB,CAAC,CAAD,CAA3C,IACAA,mBAAmB,KAAKA,mBAAmB,CAAC,CAAD,CAD3C,IAEAA,mBAAmB,KAAKA,mBAAmB,CAAC,CAAD,CAH/C,EAIE;AACEH,UAAAA,WAAW,CAACS,IAAZ,CAAiBN,mBAAjB;AACH;AACJ;AACJ,KAhBD;;AAiBA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpBE,MAAAA,YAAY,CAACN,eAAD,CAAZ;AACH;;AAID,QAAII,CAAC,KAAK,CAAV,EAAa;AACT,WAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,CAA5B,EAA+BA,KAAK,EAApC,EAAwC;AACpCT,QAAAA,cAAc,CAACQ,IAAf,CAAoBZ,SAAS,CAACG,WAAW,CAACU,KAAD,CAAZ,CAA7B;AACH;;AAED,qBAAeC,wBAAf,CAAwCC,SAAxC,EAAmD;AAC/C,YAAI;AACA,gBAAMf,SAAS,GAAG,MAAML,KAAK,CAACqB,QAAN,CACpBD,SAAS,CAACE,GADU,EAEpB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACVA,YAAAA,GAAG,CAACC,SAAJ,GAAgBvB,WAAhB;AACAsB,YAAAA,GAAG,CAACE,IAAJ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACH,WANmB,CAAxB;AAQH,SATD,CASE,OAAOK,KAAP,EAAc;AACZF,UAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ;;AACDpB,MAAAA,cAAc,CAACqB,OAAf,CAAuBC,OAAO,IAAI;AAC9BZ,QAAAA,wBAAwB,CAACY,OAAD,CAAxB;AACH,OAFD;AAGH;AACJ,GA/CD,MA+CO;AACHJ,IAAAA,OAAO,CAACC,GAAR,CACI,0EADJ;AAGH;AAGJ,CA/DD;;AAiEAI,MAAM,CAACC,OAAP,GAAiBhC,eAAjB","sourcesContent":["/* eslint-disable no-shadow */\n/* eslint-disable no-inner-declarations */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nconst db = require(\"./_helpers/db\");\n//const {doc} = require(\"prettier\");\nconst Trees = db.Trees;\n\nconst newUserFunction = (getPlayerId, getFreeTrees) => {\n    const playerId = getPlayerId;\n    const freeTrees = getFreeTrees;\n    const freeTreesNumber = freeTrees.length;\n    const randomTrees = [];\n    const getRandomTrees = [];\n    let i;\n    let getRandomTreeNumber;\n\n    if (freeTreesNumber > 10) {\n        const getRandomInt = max => {\n            getRandomTreeNumber = Math.floor(Math.random() * Math.floor(max));\n\n            //console.log(getRandomTreeNumber);\n\n            if (i === 0) {\n                randomTrees.push(getRandomTreeNumber);\n            } else {\n                if (\n                    getRandomTreeNumber !== getRandomTreeNumber[0] ||\n                    getRandomTreeNumber !== getRandomTreeNumber[1] ||\n                    getRandomTreeNumber !== getRandomTreeNumber[2]\n                ) {\n                    randomTrees.push(getRandomTreeNumber);\n                }\n            }\n        };\n        for (i = 0; i < 3; i++) {\n            getRandomInt(freeTreesNumber);\n        }\n\n        //console.log(randomTrees);\n\n        if (i === 3) {\n            for (let index = 0; index < 3; index++) {\n                getRandomTrees.push(freeTrees[randomTrees[index]]);\n            }\n            //console.log(getRandomTrees);\n            async function addFreeTreesToNewPlayers(treeArray) {\n                try {\n                    const freeTrees = await Trees.findById(\n                        treeArray._id,\n                        (err, doc) => {\n                            doc.player_id = getPlayerId;\n                            doc.save();\n                            console.log(doc);\n                        },\n                    );\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n            getRandomTrees.forEach(element => {\n                addFreeTreesToNewPlayers(element);\n            });\n        }\n    } else {\n        console.log(\n            \"Il n'y a plus assez d'abres disponnible pour un nouveau joueur désolé...\",\n        );\n    }\n    //console.log(getRandomTrees);\n    //module.exports = getRandomTrees;\n};\n\nmodule.exports = newUserFunction;\n"],"file":"getfreetrees.js"}