{"version":3,"sources":["../../../src/server/gamer/user.service.js"],"names":["jwt","require","bcrypt","db","User","secret","module","exports","authenticate","getAll","getById","create","update","delete","_delete","pseudo","password","user","findOne","compareSync","hash","token","sign","sub","id","toJSON","find","findById","userParam","hashSync","save","Object","assign","findByIdAndRemove"],"mappings":";;;;;;;;AAQA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,gBAAD,CAAlB;;AACA,MAAMG,IAAI,GAAGD,EAAE,CAACC,IAAhB;AACA,MAAMC,MAAM,GACR,mGADJ;AAGAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,YADa;AAEbC,EAAAA,MAFa;AAGbC,EAAAA,OAHa;AAIbC,EAAAA,MAJa;AAKbC,EAAAA,MALa;AAMbC,EAAAA,MAAM,EAAEC;AANK,CAAjB;;AASA,eAAeN,YAAf,CAA4B;AAACO,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAA5B,EAAgD;AAC5C,QAAMC,IAAI,GAAG,MAAMb,IAAI,CAACc,OAAL,CAAa;AAACH,IAAAA;AAAD,GAAb,CAAnB;;AACA,MAAIE,IAAI,IAAIf,MAAM,CAACiB,WAAP,CAAmBH,QAAnB,EAA6BC,IAAI,CAACG,IAAlC,CAAZ,EAAqD;AACjD,UAAMC,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CAAS;AAACC,MAAAA,GAAG,EAAEN,IAAI,CAACO;AAAX,KAAT,EAAyBnB,MAAzB,CAAd;AACA,2CACOY,IAAI,CAACQ,MAAL,EADP;AAEIJ,MAAAA;AAFJ;AAIH;AACJ;;AAED,eAAeZ,MAAf,GAAwB;AACpB,SAAO,MAAML,IAAI,CAACsB,IAAL,EAAb;AACH;;AAED,eAAehB,OAAf,CAAuBc,EAAvB,EAA2B;AACvB,SAAO,MAAMpB,IAAI,CAACuB,QAAL,CAAcH,EAAd,CAAb;AACH;;AAED,eAAeb,MAAf,CAAsBiB,SAAtB,EAAiC;AAE7B,MAAI,MAAMxB,IAAI,CAACc,OAAL,CAAa;AAACH,IAAAA,MAAM,EAAEa,SAAS,CAACb;AAAnB,GAAb,CAAV,EAAoD;AAChD,UAAO,WAAUa,SAAS,CAACb,MAAO,oBAAlC;AACH;;AAED,QAAME,IAAI,GAAG,IAAIb,IAAJ,CAASwB,SAAT,CAAb;;AAGA,MAAIA,SAAS,CAACZ,QAAd,EAAwB;AACpBC,IAAAA,IAAI,CAACG,IAAL,GAAYlB,MAAM,CAAC2B,QAAP,CAAgBD,SAAS,CAACZ,QAA1B,EAAoC,EAApC,CAAZ;AACH;;AAGD,QAAMC,IAAI,CAACa,IAAL,EAAN;AACH;;AAED,eAAelB,MAAf,CAAsBY,EAAtB,EAA0BI,SAA1B,EAAqC;AACjC,QAAMX,IAAI,GAAG,MAAMb,IAAI,CAACuB,QAAL,CAAcH,EAAd,CAAnB;;AAGA,MAAI,CAACP,IAAL,EAAW;AACP,UAAM,gBAAN;AACH;;AACD,MACIA,IAAI,CAACF,MAAL,KAAgBa,SAAS,CAACb,MAA1B,KACC,MAAMX,IAAI,CAACc,OAAL,CAAa;AAACH,IAAAA,MAAM,EAAEa,SAAS,CAACb;AAAnB,GAAb,CADP,CADJ,EAGE;AACE,UAAO,WAAUa,SAAS,CAACb,MAAO,oBAAlC;AACH;;AAGD,MAAIa,SAAS,CAACZ,QAAd,EAAwB;AACpBY,IAAAA,SAAS,CAACR,IAAV,GAAiBlB,MAAM,CAAC2B,QAAP,CAAgBD,SAAS,CAACZ,QAA1B,EAAoC,EAApC,CAAjB;AACH;;AAGDe,EAAAA,MAAM,CAACC,MAAP,CAAcf,IAAd,EAAoBW,SAApB;AAEA,QAAMX,IAAI,CAACa,IAAL,EAAN;AACH;;AAED,eAAehB,OAAf,CAAuBU,EAAvB,EAA2B;AACvB,QAAMpB,IAAI,CAAC6B,iBAAL,CAAuBT,EAAvB,CAAN;AACH","sourcesContent":["ï»¿/* eslint-disable no-use-before-define */\n/* eslint-disable consistent-return */\n/* eslint-disable no-extra-parens */\n/* eslint-disable require-atomic-updates */\n/* eslint-disable no-sync */\n/* eslint-disable no-throw-literal */\n/* eslint-disable no-return-await */\n//const config = require(\"config.json\");\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcryptjs\");\nconst db = require(\"../_helpers/db\");\nconst User = db.User;\nconst secret =\n    \"THIS IS USED TO SIGN AND VERIFY JWT TOKENS, REPLACE IT WITH YOUR OWN SECRET, IT CAN BE ANY STRING\";\n\nmodule.exports = {\n    authenticate,\n    getAll,\n    getById,\n    create,\n    update,\n    delete: _delete,\n};\n\nasync function authenticate({pseudo, password}) {\n    const user = await User.findOne({pseudo});\n    if (user && bcrypt.compareSync(password, user.hash)) {\n        const token = jwt.sign({sub: user.id}, secret);\n        return {\n            ...user.toJSON(),\n            token,\n        };\n    }\n}\n\nasync function getAll() {\n    return await User.find();\n}\n\nasync function getById(id) {\n    return await User.findById(id);\n}\n\nasync function create(userParam) {\n    // validate\n    if (await User.findOne({pseudo: userParam.pseudo})) {\n        throw `pseudo \"${userParam.pseudo}\" is already taken`;\n    }\n\n    const user = new User(userParam);\n\n    // hash password\n    if (userParam.password) {\n        user.hash = bcrypt.hashSync(userParam.password, 10);\n    }\n\n    // save user\n    await user.save();\n}\n\nasync function update(id, userParam) {\n    const user = await User.findById(id);\n\n    // validate\n    if (!user) {\n        throw \"User not found\";\n    }\n    if (\n        user.pseudo !== userParam.pseudo &&\n        (await User.findOne({pseudo: userParam.pseudo}))\n    ) {\n        throw `pseudo \"${userParam.pseudo}\" is already taken`;\n    }\n\n    // hash password if it was entered\n    if (userParam.password) {\n        userParam.hash = bcrypt.hashSync(userParam.password, 10);\n    }\n\n    // copy userParam properties to user\n    Object.assign(user, userParam);\n\n    await user.save();\n}\n\nasync function _delete(id) {\n    await User.findByIdAndRemove(id);\n}\n"],"file":"user.service.js"}