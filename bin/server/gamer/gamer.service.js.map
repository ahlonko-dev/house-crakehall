{"version":3,"sources":["../../../src/server/gamer/gamer.service.js"],"names":["db","require","Gamer","module","exports","getAll","getById","create","update","delete","_delete","find","id","findById","GamerParam","gamer","save","pseudo","findOne","Object","assign","findByIdAndRemove"],"mappings":";;AAYA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,MAAMC,KAAK,GAAGF,EAAE,CAACE,KAAjB;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MADa;AAEbC,EAAAA,OAFa;AAGbC,EAAAA,MAHa;AAIbC,EAAAA,MAJa;AAKbC,EAAAA,MAAM,EAAEC;AALK,CAAjB;;AAmBA,eAAeL,MAAf,GAAwB;AACpB,SAAO,MAAMH,KAAK,CAACS,IAAN,EAAb;AACH;;AAED,eAAeL,OAAf,CAAuBM,EAAvB,EAA2B;AACvB,SAAO,MAAMV,KAAK,CAACW,QAAN,CAAeD,EAAf,CAAb;AACH;;AAED,eAAeL,MAAf,CAAsBO,UAAtB,EAAkC;AAM9B,QAAMC,KAAK,GAAG,IAAIb,KAAJ,CAAUY,UAAV,CAAd;AAQA,QAAMC,KAAK,CAACC,IAAN,EAAN;AACH;;AAED,eAAeR,MAAf,CAAsBI,EAAtB,EAA0BE,UAA1B,EAAsC;AAClC,QAAMC,KAAK,GAAG,MAAMb,KAAK,CAACW,QAAN,CAAeD,EAAf,CAApB;;AAGA,MAAI,CAACV,KAAL,EAAY;AACR,UAAM,iBAAN;AACH;;AACD,MACIA,KAAK,CAACe,MAAN,KAAiBH,UAAU,CAACG,MAA5B,KACC,MAAMf,KAAK,CAACgB,OAAN,CAAc;AAACD,IAAAA,MAAM,EAAEH,UAAU,CAACG;AAApB,GAAd,CADP,CADJ,EAGE;AACE,UAAO,WAAUH,UAAU,CAACG,MAAO,oBAAnC;AACH;;AAQDE,EAAAA,MAAM,CAACC,MAAP,CAAcL,KAAd,EAAqBD,UAArB;AAEA,QAAMC,KAAK,CAACC,IAAN,EAAN;AACH;;AAED,eAAeN,OAAf,CAAuBE,EAAvB,EAA2B;AACvB,QAAMV,KAAK,CAACmB,iBAAN,CAAwBT,EAAxB,CAAN;AACH","sourcesContent":["ï»¿/* eslint-disable no-shadow */\n/* eslint-disable no-use-before-define */\n/* eslint-disable consistent-return */\n/* eslint-disable no-extra-parens */\n/* eslint-disable require-atomic-updates */\n/* eslint-disable no-sync */\n/* eslint-disable no-throw-literal */\n/* eslint-disable no-return-await */\n\n//const config = require(\"config.json\");\n//const jwt = require(\"jsonwebtoken\");\n//const bcrypt = require(\"bcryptjs\");\nconst db = require(\"../_helpers/db\");\nconst Gamer = db.Gamer;\n/* const secret =\n    \"THIS IS USED TO SIGN AND VERIFY JWT TOKENS, REPLACE IT WITH YOUR OWN SECRET, IT CAN BE ANY STRING\";\n */\nmodule.exports = {\n    getAll,\n    getById,\n    create,\n    update,\n    delete: _delete,\n};\n\n/* async function authenticate({pseudo, password}) {\n    const Gamer = await Gamer.findOne({pseudo});\n    if (Gamer && bcrypt.compareSync(password, Gamer.hash)) {\n        const token = jwt.sign({sub: Gamer.id}, secret);\n        return {\n            ...Gamer.toJSON(),\n            token,\n        };\n    }\n} */\n\nasync function getAll() {\n    return await Gamer.find();\n}\n\nasync function getById(id) {\n    return await Gamer.findById(id);\n}\n\nasync function create(GamerParam) {\n    // validate\n    /* if (await Gamer.findOne({pseudo: GamerParam.pseudo})) {\n        throw `pseudo \"${GamerParam.pseudo}\" is already taken`;\n    } */\n\n    const gamer = new Gamer(GamerParam);\n\n    // hash password don't need to log\n    /* if (GamerParam.password) {\n        Gamer.hash = bcrypt.hashSync(GamerParam.password, 10);\n    } */\n\n    // save Gamer\n    await gamer.save();\n}\n\nasync function update(id, GamerParam) {\n    const gamer = await Gamer.findById(id);\n\n    // validate\n    if (!Gamer) {\n        throw \"Gamer not found\";\n    }\n    if (\n        Gamer.pseudo !== GamerParam.pseudo &&\n        (await Gamer.findOne({pseudo: GamerParam.pseudo}))\n    ) {\n        throw `pseudo \"${GamerParam.pseudo}\" is already taken`;\n    }\n\n    // hash password if it was entered dont need to log\n    /* if (GamerParam.password) {\n        GamerParam.hash = bcrypt.hashSync(GamerParam.password, 10);\n    } */\n\n    // copy GamerParam properties to Gamer\n    Object.assign(gamer, GamerParam);\n\n    await gamer.save();\n}\n\nasync function _delete(id) {\n    await Gamer.findByIdAndRemove(id);\n}\n"],"file":"gamer.service.js"}