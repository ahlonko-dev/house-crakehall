{"version":3,"sources":["../../../src/server/users/user.service.js"],"names":["jwt","require","bcrypt","db","User","secret","treeService","algoService","module","exports","authenticate","getAll","getById","create","update","delete","_delete","pseudo","password","status","user","findOne","compareSync","hash","token","sign","sub","id","save","updateConnectionDate","_id","toJSON","find","findById","userParam","hashSync","findIdPlayer","findUserId","newPlayerTreesGenerator","getMoneyById","playerPseudo","err","console","log","Object","assign","findByIdAndRemove"],"mappings":"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","sourcesContent":["ï»¿/* eslint-disable require-atomic-updates */\n/* eslint-disable no-console */\n/* eslint-disable no-throw-literal */\n/* eslint-disable no-return-await */\n/* eslint-disable no-sync */\n/* eslint-disable consistent-return */\n/* eslint-disable no-use-before-define */\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcryptjs\");\nconst db = require(\"../_helpers/db\");\nconst User = db.User;\nconst secret =\n    \"THIS IS USED TO SIGN AND VERIFY JWT TOKENS, REPLACE IT WITH YOUR OWN SECRET, IT CAN BE ANY STRING\";\n//const algoService = require(\"./algo.service\");\n//import(\"../global\");\n\nconst treeService = require(\"../trees/trees.service\");\nconst algoService = require(\"../algo/algo.service\");\n\nmodule.exports = {\n    authenticate,\n    getAll,\n    getById,\n    create,\n    update,\n    delete: _delete,\n};\n\nasync function authenticate({pseudo, password}) {\n    let status = false; //status connexion\n    const user = await User.findOne({pseudo});\n    if (user && bcrypt.compareSync(password, user.hash)) {\n        const token = jwt.sign({sub: user.id}, secret);\n\n        status = true;\n        user.status = status; //change status true\n\n        await user.save(); //save change\n\n        //to upDate dateConnect\n        algoService.updateConnectionDate(user._id);\n        return {\n            ...user.toJSON(),\n            token,\n        };\n    }\n}\n\nasync function getAll() {\n    return await User.find();\n}\n\nasync function getById(id) {\n    return await User.findById(id);\n}\nasync function create(userParam) {\n    // validate\n    if (await User.findOne({pseudo: userParam.pseudo})) {\n        throw `pseudo \"${userParam.pseudo}\" is already taken`;\n    }\n    const user = new User(userParam);\n    // hash password\n    if (userParam.password) {\n        user.hash = bcrypt.hashSync(userParam.password, 10);\n    }\n\n    await user.save();\n    const findIdPlayer = await findUserId(user.pseudo);\n    await treeService.newPlayerTreesGenerator(findIdPlayer);\n    await algoService.getMoneyById(findIdPlayer); //generate money for new user\n}\n\nasync function findUserId(playerPseudo) {\n    const user = await User.findOne({pseudo: playerPseudo}, err => {\n        if (err) {\n            console.log(err);\n            return null;\n        }\n    });\n    return user;\n}\n\nasync function update(id, userParam) {\n    const user = await User.findById(id);\n\n    // validate\n    if (!user) {\n        throw \"User not found\";\n    }\n    if (\n        user.pseudo !== userParam.pseudo &&\n        // eslint-disable-next-line prettier/prettier\n        await User.findOne({pseudo: userParam.pseudo})\n    ) {\n        throw `pseudo \"${userParam.pseudo}\" is already taken`;\n    }\n\n    // hash password if it was entered\n    if (userParam.password) {\n        userParam.hash = bcrypt.hashSync(userParam.password, 10);\n    }\n\n    // copy userParam properties to user\n    Object.assign(user, userParam);\n\n    await user.save();\n}\n\nasync function _delete(id) {\n    await User.findByIdAndRemove(id);\n}\n"],"file":"user.service.js"}